/* Generated By:JavaCC: Do not edit this line. Karloff.java */
import java.io.*;
import java.util.ArrayList;
import ast.*;
public class Karloff implements KarloffConstants {

  public static void main(String args[]) throws ParseException,IOException {

    Karloff analisador = new Karloff(new FileInputStream(args[0]));
    Prog arv =analisador.Karloff();
    print(arv);
  }

  static final public Prog Karloff() throws ParseException {
 Main main = null; ArrayList<Fun>  listaFuncao;
    main = Main();
    listaFuncao = Func();
    jj_consume_token(0);
   {if (true) return fun == null ? new Prog(main) : new Prog(main, listaFuncao);}
    throw new Error("Missing return statement in function");
  }

  static final public Main Main() throws ParseException {
 ArrayList<VarDecl>  varDecl = null; ArrayList<Comando> comandos = null ;
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(APAR);
    jj_consume_token(FPAR);
    jj_consume_token(ACHAVES);
    varDecl = VarDecl();
    comandos = SeqComandos();
    jj_consume_token(FCHAVES);
  {if (true) return new Main(varDecl, comandos);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<VarDecl> VarDecl() throws ParseException {
 String var = null; String tipo = null; ArrayList<VarDecl> listaVarDecl = new ArrayList();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(VAR);
      tipo = Tipo();
      var = jj_consume_token(ID);
      jj_consume_token(PV);
                                    listaVarDecl.add(new VarDecl(tipo, var.image));
    }
  {if (true) return listaVarDecl;}
    throw new Error("Missing return statement in function");
  }

//TIPO -> "float" | "boolean" | "void"
  static final public String Tipo() throws ParseException {
 String tipo = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      jj_consume_token(FLOAT);
          tipo = "float";
      break;
    case BOOL:
      jj_consume_token(BOOL);
         tipo = "boolean";
      break;
    case VOID:
      jj_consume_token(VOID);
         tipo = "void";
   {if (true) return tipo;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// SEQCOMANDOS ->  COMANDO +
  static final public ArrayList<Comando> SeqComandos() throws ParseException {
 ArrayList<Comando> comandos = null; Comando c = null;
    label_2:
    while (true) {
      c = Comando();
                comandos.add(c);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case IF:
      case WHILE:
      case RETURN:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
  {if (true) return comandos;}
    throw new Error("Missing return statement in function");
  }

// COMANDO -> TOKEN_id COMANDO’
// | "if" EXP "then" "{" SEQCOMANDOS "}" ";"
// | "while" EXP "{" SEQCOMANDOS "}" ";"
// | "return" EXP ";"
// | "printOut" EXP ";"
  static final public Comando Comando() throws ParseException {
  String var = null;
  Comando resultado = null;
  Comando comando_ = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      var = jj_consume_token(ID);
      comando = Comando_(var.image, resultado);
      break;
    case IF:
      resultado = Cond();
      break;
    case WHILE:
      resultado = Loop();
      break;
    case RETURN:
      resultado = Return();
      break;
    case PRINT:
      resultado = Print();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return resultado;}
    throw new Error("Missing return statement in function");
  }

// COMANDO’ -> "=" COMANDO’ | "(" LISTAEXP? ")"  ";" |  = "readInput" "(" ")" ";"
  static final public Comando Comando_(String var, Comando result) throws ParseException {
  ArrayList<Exp> exps = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIB:
      jj_consume_token(ATRIB);
      Comando_(var, result);
      break;
    case APAR:
      jj_consume_token(APAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APAR:
      case TRUE:
      case FALSE:
      case NUM:
      case ID:
        exps = ListaExp();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(FPAR);
      jj_consume_token(PV);
                                                 result = new CChamadaFun(0, var, exps);
      break;
      jj_consume_token(ATRIB);
      com__ = jj_consume_token(READ);
      jj_consume_token(APAR);
      jj_consume_token(FPAR);
      jj_consume_token(PV);
                                                    result = new CReadInput(0, var);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//Perguntar
//void Atribuicao() : 
//{}
//{

 // <ID> (<ATRIB> (Exp() <PV> | <READ> <APAR> <FPAR>) | <APAR> (ListaExp())? <FPAR> <PV>)
//}

// | "if" EXP "then" "{" SEQCOMANDOS "}" ";"
  static final public void Cond() throws ParseException {
 Exp e = null; ArrayList<Comandos> comandos = null;
    jj_consume_token(IF);
    e = Exp();
    jj_consume_token(THEN);
    jj_consume_token(ACHAVES);
    comandos = SeqComandos();
    jj_consume_token(FCHAVES);
    jj_consume_token(PV);
   {if (true) return new CIf(0,  e, comandos);}
  }

// | "while" EXP "{" SEQCOMANDOS "}" ";"
  static final public void Loop() throws ParseException {
 Exp e = null; ArrayList<Comandos> comandos = null;
    jj_consume_token(WHILE);
    e = Exp();
    jj_consume_token(ACHAVES);
    comandos = SeqComandos();
    jj_consume_token(FCHAVES);
    jj_consume_token(PV);
   {if (true) return new CWhile(0, e, comandos);}
  }

// | "return" EXP ";"
  static final public void Return() throws ParseException {
 Exp e = null;
    jj_consume_token(RETURN);
    e = Exp();
    jj_consume_token(PV);
   {if (true) return new CReturn(0, e);}
  }

// | "printOut" EXP ";"
  static final public void Print() throws ParseException {
 Exp e = null;
    jj_consume_token(PRINT);
    e = Exp();
    jj_consume_token(PV);
   {if (true) return new CPrint(0 , e);}
  }

//Perguntar
//EXP -> EXP´ (OP EXP ")" )* 
  static final public Exp Exp() throws ParseException {
    ExpL();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULT:
      case DIV:
      case COMP:
      case OR:
      case LESSER:
      case BIGGER:
      case AND:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      Op();
      ExpL();
    }
  }

//EXP´ -> "(" EXP OP EXP ")" | FATOR
  static final public void ExpL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APAR:
      jj_consume_token(APAR);
      Exp();
      jj_consume_token(FPAR);
      break;
    case TRUE:
    case FALSE:
    case NUM:
    case ID:
      Fator();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// FATOR -> TOKEN_id | TOKEN_id "(" LISTAEXP? ")"
//| TOKEN_numliteral | "true" | "false"
  static final public void Fator() throws ParseException {
  ArratList<Exp> exps = null;
  String var = null;
  Float num = null;
  Exp result = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      var = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APAR:
        jj_consume_token(APAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case APAR:
        case TRUE:
        case FALSE:
        case NUM:
        case ID:
          exps = ListaExp();
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        jj_consume_token(FPAR);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    if(exps == null){
      result = new EVar(var.image);
    }else{
      result = new  EChamadaFun(var.image, exps);
    }
      break;
    case NUM:
      num = jj_consume_token(NUM);
    result = new EFloat(num.image);
      break;
    case TRUE:
      jj_consume_token(TRUE);
    result = new ETrue();
      break;
    case FALSE:
      jj_consume_token(FALSE);
    result = new EFalse();
  {if (true) return result;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//OP -> "+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "=="
  static final public void Op() throws ParseException {
 String op = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
          op = "+";
      break;
    case MINUS:
      jj_consume_token(MINUS);
           op = "-";
      break;
    case MULT:
      jj_consume_token(MULT);
          op = "*";
      break;
    case DIV:
      jj_consume_token(DIV);
         op = "/";
      break;
    case AND:
      jj_consume_token(AND);
         op = "&";
      break;
    case OR:
      jj_consume_token(OR);
        op = "|";
      break;
    case LESSER:
      jj_consume_token(LESSER);
            op = "<";
      break;
    case BIGGER:
      jj_consume_token(BIGGER);
            op = ">";
      break;
    case COMP:
      jj_consume_token(COMP);
          op = "==";
  {if (true) return op;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//LISTAEXP -> EXP  LISTAEXP´ 
  static final public ArratList<Exp> ListaExp() throws ParseException {
 Exp e = null;  ArrayList<Exp> lista = new ArrayList();
    e = Exp();
  lista.add(e);
    ListaExpL(lista);
  {if (true) return lista;}
    throw new Error("Missing return statement in function");
  }

//LISTAEXP´ -> "," EXP LISTAEXP´ | vazio 
  static final public void ListaExpL(ArrayList<Exp> lista) throws ParseException {
 Exp e = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIRGULA:
      jj_consume_token(VIRGULA);
      e = Exp();
                        lista.add(e);
      ListaExpL(lista);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

//LISTAARG -> TIPO TOKEN_id  LISTAARG´ 
  static final public ArrayList<ParamFormalFun> ListaArg() throws ParseException {
  String tipo = null ;
  String var =  null;
  ArrayList<ParamFormalFun> listaArg = new ArrayList();
    tipo = Tipo();
    var = jj_consume_token(ID);
  listaArg.add(new ParamFormalFun(tipo, var.image));
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      ListaArgL(listaArg);
    }
   {if (true) return listaArg;}
    throw new Error("Missing return statement in function");
  }

//LISTAARG´ -> "," TIPO TOKEN_id LISTAARG´
  static final public void ListaArgL(ArrayList<ParamFormalFun> listaArg) throws ParseException {
 String tipo = null ; String var =  null;
    jj_consume_token(VIRGULA);
    tipo = Tipo();
    var = jj_consume_token(ID);
    listaArg.add(new ParamFormalFun(tipo, var.image));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIRGULA:
      ListaArgL(listaArg);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

//FUNC ->  FUNC´ 
  static final public ArrayList<Fun> Func() throws ParseException {
 ArrayList<Fun> funs = new ArrayList();
    FuncL(funs);
  {if (true) return funs;}
    throw new Error("Missing return statement in function");
  }

//FUN'-> "fun" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}" FUN' | vazio
  static final public void FuncL(ArrayList<Fun> funs) throws ParseException {
 String tipo = null;
  String var = null;
  ArrayList<ParamFormalFun> args;
ArrayList<Comando> comandos =  null;
ArrayList<VarDecl> varDecl = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUN:
      jj_consume_token(FUN);
      tipo = Tipo();
      var = jj_consume_token(ID);
      jj_consume_token(APAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case FLOAT:
      case BOOL:
        args = ListaArg();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(FPAR);
      jj_consume_token(ACHAVES);
      varDecl = VarDecl();
      comandos = SeqComandos();
      jj_consume_token(FCHAVES);
    funs.add(new Fun(var.image, args, tipo , varDecl, comandos));
      FuncL(funs);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public KarloffTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800,0x82100,0x78000,0x78000,0x3000200,0x4200,0x7cf00000,0x3000200,0x3000200,0x200,0x3000000,0x7cf00000,0x0,0x0,0x0,0x82100,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x10,0x10,0x18,0x0,0x0,0x18,0x18,0x0,0x18,0x0,0x2,0x2,0x2,0x0,0x1,};
   }

  /** Constructor with InputStream. */
  public Karloff(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Karloff(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new KarloffTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Karloff(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KarloffTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Karloff(KarloffTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(KarloffTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
