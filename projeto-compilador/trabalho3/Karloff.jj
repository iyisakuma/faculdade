PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String args[]) throws ParseException,IOException {
    
 Karloff analisador = new Karloff(new FileInputStream(args[0]));
 analisador.Karloff();
  }

}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <PONTO_VIRGULA: ";">
| <ATTR: "=">
| <VOID: "void">
| <FLOAT: "float">
| <BOOLEAN: "boolean">
| <RETURN: "return">
| <WHILE: "while">
| <FUNCTION:"fun">
| <IF: "if">
| <SOMA: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&" >
| <OR: "|">
| <MENORQ: "<">
| <MAIORQ: ">">
| <EQUAL: "==">
| <TRUE: "true">
| <FALSE: "false">
| <VIRGULA: ",">
}

TOKEN :
{
  <NUM : (["0"-"9"])+("."(["0"-"9"])+ )?>
 |< ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9"])*("_"(["a"-"z", "A"-"Z", "0"-"9"])*)?>


}



void Karloff () :
{}
{
  <VOID> <MAIN> <APARENTESES> 
}





